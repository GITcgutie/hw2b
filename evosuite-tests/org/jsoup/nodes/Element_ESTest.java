/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 19:57:13 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1549);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 1549);
      document0.html(bufferedWriter0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("p:oeHg8$+");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "p:oeHg8$+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 6, document_OutputSettings1);
      assertEquals("p:oeHg8$+</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.attributes();
      CharBuffer charBuffer0 = CharBuffer.allocate(606);
      document0.outerHtml((Appendable) charBuffer0);
      assertEquals(540, charBuffer0.remaining());
      assertEquals(540, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("q7KZ=m'$mk");
      Element element0 = document0.val(":lt(0)");
      assertEquals(1, element0.childNodeSize());
      assertEquals("q7KZ=m'$mk", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("q7KZ=m'$mk");
      document0.val();
      assertEquals("q7KZ=m'$mk", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("tn3|UKS##H^V![PY8l");
      document0.toggleClass("");
      boolean boolean0 = document0.hasClass("");
      assertEquals("tn3|UKS##H^V![PY8l", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("tn3|UKS##H^V![PY8l");
      document0.toggleClass("");
      boolean boolean0 = document0.hasClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn3|UKS##H^V![PY8l", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("?!k");
      Document document1 = document0.normalise();
      document0.text("?!k");
      document1.data();
      assertEquals(1, document0.childNodeSize());
      assertEquals("?!k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("?!k");
      Document document1 = document0.normalise();
      document0.text("?!k");
      boolean boolean0 = document1.hasText();
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("^zBQm?/!o mt&Z-", "", "id", "id", (String) null);
      boolean boolean0 = Element.preserveWhitespace(documentType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("?!k");
      document0.normalise();
      document0.text("?!k");
      document0.getElementsContainingOwnText("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.text("textarea");
      String string0 = document0.wholeText();
      assertEquals("textarea", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("?!k");
      document0.normalise();
      Element element0 = document0.text("?!k");
      document0.appendChild(element0);
      element0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("?!k");
      document0.normalise();
      Element element0 = document0.text("?!k");
      element0.getElementsContainingText("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("?!k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("?!k");
      document0.normalise();
      Element element0 = document0.body();
      Element element1 = element0.html("");
      Element element2 = element1.lastElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertSame(element0, element2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("?!k");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.lastElementSibling();
      assertEquals("?!k", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document(";T.}b");
      Element element0 = document0.prependElement(";T.}b");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
      assertEquals(";T.}b", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("qOMX=&Ug(*1}");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      Element element2 = element1.previousElementSibling();
      assertNull(element2);
      assertEquals("qOMX=&Ug(*1}", element1.baseUri());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.previousElementSibling();
      assertEquals("html", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("qOMX=&Ug(*1}");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals("qOMX=&Ug(*1}", element1.baseUri());
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell(";T.}b");
      Element element0 = document0.prependElement(";T.}b");
      Element element1 = element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("q7KZ=m'$mk");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertEquals("q7KZ=m'$mk", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("q7KZ=m'$mk");
      Document document1 = document0.normalise();
      document0.appendChild(document1);
      document1.siblingElements();
      assertEquals(1, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("q7KZ=m'$mk");
      document0.siblingElements();
      assertEquals("q7KZ=m'$mk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("tn3|UKS##H^V![PY8l");
      Element element0 = document0.toggleClass("");
      element0.cssSelector();
      assertEquals("tn3|UKS##H^V![PY8l", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("?!k");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("q7KZ=m'$mk");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-662), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("L`J*Y>,omLhprn&ON");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(5084, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf(" />", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$NodeList", attributes0);
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("body");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-421), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("$kwNuD]A~//^Ja]A<A");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(1664, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("q7KZ=m'$mk");
      Document document1 = document0.normalise();
      document1.dataNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("V\"6OrhL%pyuPb");
      document0.text("");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
      assertEquals(1, element0.siblingIndex());
      assertEquals("V\"6OrhL%pyuPb", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("WESdr=g1QLt");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals("WESdr=g1QLt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("?!k");
      Document document1 = document0.normalise();
      Element element0 = document0.body();
      document0.text("?!k");
      element0.appendChild(document0);
      Elements elements0 = document1.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("<ZUz3FeYBWbGu9@");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1490);
      assertEquals("<ZUz3FeYBWbGu9@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("$. |-QOeU8'w_'X");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Element element0 = new Element("Rd1=q(Zmf9y");
      // Undeclared exception!
      try { 
        element0.is("Rd1=q(Zmf9y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Rd1=q(Zmf9y': unexpected token at '=q(Zmf9y'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("C\"vWbo|cMp5fu:T");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("C\"vWbo|cMp5fu:T", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("WESdr=g1QLt");
      Element element0 = document0.removeClass("WESdr=g1QLt");
      assertEquals(1, element0.childNodeSize());
      assertEquals("WESdr=g1QLt", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("fzZOw;v)GwV%4/Phk");
      document0.getElementsByAttribute("Bx[{Z,#5");
      assertEquals("fzZOw;v)GwV%4/Phk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("C\"vWbo|cMp5fu:T");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("C\"vWbo|cMp5fu:T", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("(1` UUc");
      document0.getElementsByAttributeValueNot("WJuRG_I", ".");
      assertEquals("(1` UUc", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = (Document)document0.appendTo(document0);
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$1", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$1", attributes0);
      Element element0 = formElement0.shallowClone();
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("<ZUz3FeYBWbGu9@");
      Document document1 = document0.clone();
      assertEquals("<ZUz3FeYBWbGu9@", document1.baseUri());
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell(":!%={HNh9!iJ");
      assertEquals(":!%={HNh9!iJ", document0.baseUri());
      
      document0.doSetBaseUri("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsEmpty");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("Uo>k");
      document0.getElementsByAttributeValueContaining("Pattern syntax error: ", "h");
      assertEquals("Uo>k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("");
      Pattern pattern0 = Pattern.compile("", 43);
      Elements elements0 = document0.getElementsByAttributeValueMatching("*(AfA'n^qWr", pattern0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("q7KZ=m'$mk");
      Elements elements0 = document0.getElementsByClass("q7KZ=m'$mk");
      assertEquals("q7KZ=m'$mk", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("q7KZ=m'$mk");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      document0.is((Evaluator) evaluator_IndexLessThan0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("q7KZ=m'$mk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C");
      CDataNode cDataNode0 = new CDataNode("`(Rn");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Elements elements0 = document0.getElementsByIndexEquals(606);
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("?!k");
      document0.getElementsByAttributeStarting("Y5)/]Oua~:");
      assertEquals("?!k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Element element0 = new Element("HEoSe7HM!");
      Elements elements0 = element0.getElementsByIndexLessThan((-2273));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Element element0 = new Element("HEoSe7HM!");
      // Undeclared exception!
      try { 
        element0.after("HEoSe7HM!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("d2\"o:FooL6jfCLZ");
      Elements elements0 = document0.getElementsMatchingOwnText("!Ucx0y[T]Ygq@g");
      assertEquals("d2\"o:FooL6jfCLZ", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("K");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("qOMX=&Ug(*1}");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("qOMX=&Ug(*1}", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("<ZUz3FeYBWbGu9@");
      document0.getElementsByAttributeValueStarting("<ZUz3FeYBWbGu9@", "4");
      assertEquals("<ZUz3FeYBWbGu9@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.getElementsByAttributeValue("V~>k{", "V~>k{");
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.attr("", true);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("?!k");
      Element element0 = document0.html("");
      assertEquals("?!k", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Tag tag0 = Tag.valueOf("F{dF9S$ZFsOO,j,s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "F{dF9S$ZFsOO,j,s", attributes0);
      DataNode dataNode0 = DataNode.createFromEncoded("#kl", "#kl");
      // Undeclared exception!
      try { 
        formElement0.before((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("<!--");
      Element element0 = document0.addClass("<!--");
      assertEquals("<!--", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.dataset();
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("](Bfahy`1$v7tEN?~T;");
      Element element0 = document0.prependText("br");
      assertEquals("](Bfahy`1$v7tEN?~T;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.wrap("S5&}?=dg+q32Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("WESdr=g1QLt");
      Element element0 = document0.child(0);
      assertEquals("WESdr=g1QLt", element0.baseUri());
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("WESdr=g1QLt");
      document0.getElementsMatchingText("");
      assertEquals("WESdr=g1QLt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("<ZUz3FeYBWbGu9@");
      document0.appendText(" />");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell(";T.}b");
      Element element0 = document0.prependElement(";T.}b");
      element0.before(";T.}b");
      assertEquals(3, document0.childNodeSize());
      assertEquals(";T.}b", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("children collection to be inserted mst not be null.");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.getElementById("body");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("children collection to be inserted mst not be null.", document0.baseUri());
  }
}
