/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 19:59:11 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("6&;m-0qgAem\"C~'lq");
      boolean boolean0 = document0.hasSameValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Node$OuterHtmVisitor", "org.jsoup.nodes.Node$OuterHtmVisitor", true);
      boolean boolean0 = xmlDeclaration0.hasSameValue(xmlDeclaration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("EQ:u");
      boolean boolean0 = cDataNode0.hasSameValue("EQ:u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("01-S{!;RDzT");
      Document document1 = document0.normalise();
      assertEquals("01-S{!;RDzT", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("WSw_");
      Document document1 = document0.clone();
      boolean boolean0 = document1.equals(document0);
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("/X@D1l");
      Node node0 = document0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Element element0 = new Element("8;O3,AJ4F5VxX^&DRv");
      List<Node> list0 = element0.siblingNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      List<Node> list0 = document0.siblingNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("publ");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("8;O3,AJ4F5VxX^&DRv");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("option[selected]", "", false);
      xmlDeclaration0.reparentChild(cDataNode0);
      // Undeclared exception!
      try { 
        cDataNode0.replaceWith(xmlDeclaration0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("");
      TextNode textNode0 = new TextNode("{s[/-2", "{s[/-2");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        textNode0.replaceChild(element0, element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("abs:org.jsoup.select.structuralevautor");
      TextNode textNode0 = new TextNode("K\f7:./Wu;", "K\f7:./Wu;");
      // Undeclared exception!
      try { 
        textNode0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("G~d\"'k${9BC/q");
      Element element0 = document0.empty();
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("Fk]U|4s`oaY`C");
      Document document1 = Document.createShell("Fk]U|4s`oaY`C");
      document1.appendTo(document0);
      document1.wrap("Fk]U|4s`oaY`C");
      assertEquals(1, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("Fk]U|4s`oaY`C");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("Fk]U|4s`oaY`C");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentType documentType0 = new DocumentType((String) null, (String) null, (String) null, "abs:&quot;");
      // Undeclared exception!
      try { 
        documentType0.wrap("org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("/X#[G|-R8");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("ZVt886zMvfz");
      List<Node> list0 = document0.childNodesCopy();
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("meth", "#text", "Sd%");
      Node node0 = documentType0.clearAttributes();
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("abs:&quot;");
      document0.attr("abs:&quot;", true);
      Pattern pattern0 = Pattern.compile("abs:&quot;");
      Elements elements0 = document0.getElementsByAttributeValueMatching("abs:&quot;", pattern0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("Ir[nSl");
      Element element0 = document0.val("HO?#=JDeq5HQ5I");
      Elements elements0 = element0.getElementsByAttributeValueNot("org.jsoup.select.StructuralEvaluator", "ZVt886zMvfz");
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode("aEhWg$|", "org.jsoup.parser.Tag");
      textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Node$OuterHtmlVisitor", "", true);
      comment0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        comment0.after("org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = new Element("Zl6Z+q");
      Node node0 = element0.removeAttr("Zl6Z+q");
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("met=h", "#text", "S%");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE met=h PUBLIC \"#text\" \"S%\">", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Node");
      File file0 = MockFile.createTempFile("^TBHJT/E#9", "org.jsoup.nodes.Node$1");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockFileWriter mockFileWriter1 = cDataNode0.html(mockFileWriter0);
      assertSame(mockFileWriter0, mockFileWriter1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs: :U)e-H4O3?", "abs: :U)e-H4O3?");
      Node node0 = dataNode0.shallowClone();
      assertEquals(0, node0.siblingIndex());
      assertNotSame(node0, dataNode0);
      assertFalse(node0.hasParent());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("G~d\"'k${9BC/q");
      document0.reparentChild(document0);
      document0.unwrap();
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("G~d\"'k${9BC/q");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = document0.filter(nodeFilter0);
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("6&;m-0qgAem\"C~'lq");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("Sme '");
      document0.setBaseUri("");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("", "");
      Document document0 = Document.createShell("H]+<6li0,m'wF@8Ya");
      // Undeclared exception!
      try { 
        document0.before((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
