/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 19:54:20 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(32);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "ExqtF;%");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2741);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document document0 = Document.createShell("`");
      textNode0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringBuilder0, 8203, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringBuilder0, 8203, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode("M");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document document0 = Document.createShell("`");
      textNode0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlHead(stringBuilder0, 8203, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("RH!CVL<rI!", "Sot'v]Fo+I/");
      textNode0.setSiblingIndex(104);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "RH!CVL<rI!");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode0.outerHtmlHead(stringBuilder0, (-679), document_OutputSettings0);
      assertEquals("RH!CVL<rI!RH!CVL&lt;rI!", stringBuilder0.toString());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(stringBuilder0, (-444), document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      TextNode textNode1 = TextNode.createFromEncoded("ExqtF;%");
      textNode1.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode1.splitText(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = new TextNode("Kd{|MRUa9U%d2D<", "Kd{|MRUa9U%d2D<");
      // Undeclared exception!
      try { 
        textNode0.splitText((-3176));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode("org.jsoup.helper.Validate", "org.jsoup.helper.Validate");
      textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      TextNode textNode1 = textNode0.splitText(0);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(charArrayWriter0, 1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.text();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
  }
}
