/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 20:31:16 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o0#/$Wx/h9");
      tokenQueue0.consumeAttributeKey();
      assertEquals("#/$Wx/h9", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1$NS!C,&lr");
      tokenQueue0.chompTo("ftF4g");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1$NS!C,&lr");
      tokenQueue0.consumeCssIdentifier();
      assertEquals('$', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("R");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<F9:Ke>@8 Evgr");
      tokenQueue0.chompBalanced('2', '8');
      tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1$NS!C,&lr");
      tokenQueue0.advance();
      tokenQueue0.consume();
      tokenQueue0.consumeWord();
      assertEquals('!', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TokenQueue.unescape("?+-~MGc#YsY");
      assertEquals("?+-~MGc#YsY", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = TokenQueue.unescape("^\\d[");
      assertEquals("^d[", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced(' ', ' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '               '
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"JBmb3,V=B+ud");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', 'S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'JBmb3,V=B+ud'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"JBmb3,V=B+ud");
      tokenQueue0.chompBalanced('1', 'x');
      assertEquals("JBmb3,V=B+ud", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("RWl's");
      tokenQueue0.consumeTagName();
      tokenQueue0.chompBalanced('&', '&');
      assertEquals("s", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("RWl's");
      tokenQueue0.consumeTagName();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 's'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0EcO;?b=NjyCZ?'1sl");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0EcO;?b=NjyCZ?'1sl";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals('0', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(".");
      String string0 = tokenQueue0.consumeToIgnoreCase("|");
      assertEquals("", tokenQueue0.toString());
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("dNRt=ZiZV-");
      tokenQueue0.consume();
      tokenQueue0.consumeToIgnoreCase("dNRt=ZiZV-");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1$NS!C,&lr");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("|A#<DP");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<`F9:Ke>@8 Evgr");
      tokenQueue0.consume("");
      assertEquals("<`F9:Ke>@8 Evgr", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1$NS!C,&lr");
      tokenQueue0.advance();
      tokenQueue0.chompBalanced('$', ',');
      assertEquals("&lr", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o0#/$Wx/h9");
      tokenQueue0.consumeToIgnoreCase("9L/prJp&qd=({u2.xH");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("  ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals('*', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Ic5ko}");
      tokenQueue0.chompTo("Ic5ko}");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<`F9:Ke>@8 Evgr");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals("<`F9:Ke>@8 Evgr", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<F9:Ke>@8 Evgr");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1$NS!C,&lr");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals("1$NS!C,&lr", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1$NS!C,&lr");
      tokenQueue0.chompTo("ftF4g");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.consumeElementSelector();
      char[] charArray0 = new char[4];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JN^EvbBe*:*dz)lD%K^";
      tokenQueue0.consumeToAny(stringArray0);
      tokenQueue0.chompBalanced('6', '~');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("+Wy`B\nyAq]ZZH'O U");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.remainder();
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      char char0 = tokenQueue0.peek();
      assertEquals('_', char0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("+Wy`B\nyAq]ZZH'O U");
      assertEquals("+Wy`B\nyAq]ZZH'O U", tokenQueue0.toString());
      
      tokenQueue0.remainder();
      assertTrue(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("+Wy`B\nyAq]ZZH'O U");
      String string0 = tokenQueue0.toString();
      assertEquals("+Wy`B\nyAq]ZZH'O U", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o Pij{|-~");
      tokenQueue0.chompToIgnoreCase("o Pij{|-~");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("tKB G");
      Character character0 = new Character('e');
      tokenQueue0.addFirst(character0);
      assertEquals('e', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o Pij{|-~");
      tokenQueue0.matchesCS("<1W.|D%}~m,9%~r");
      assertEquals("o Pij{|-~", tokenQueue0.toString());
  }
}
