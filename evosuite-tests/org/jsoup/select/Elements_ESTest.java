/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 19:46:00 GMT 2021
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("XGRWX ;sbg=!^", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "progress", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsContainingOwnText("");
      List<FormElement> list0 = elements0.forms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      List<FormElement> list0 = elements0.forms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("wQ");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "wQ", attributes0);
      Elements elements0 = element0.getAllElements();
      Element element1 = elements0.last();
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("h]0N", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "h]0N", attributes0);
      Elements elements0 = element0.getElementsByClass("h]0N");
      Element element1 = elements0.first();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.parents();
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getAllElements();
      Elements elements1 = elements0.prevAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getAllElements();
      Elements elements1 = elements0.next("rB|Fk");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getAllElements();
      Elements elements1 = elements0.prev();
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next();
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("XGRWX ;sbg=!^", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "progress", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsContainingOwnText("");
      boolean boolean0 = elements0.is("blockquote");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("wQ");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "wQ", attributes0);
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.eq(0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      CDataNode cDataNode0 = new CDataNode("h1");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "h1", attributes0);
      Elements elements0 = formElement0.getElementsByAttributeValueStarting("h1", "device");
      Elements elements1 = elements0.eq(5);
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      Elements elements1 = elements0.remove();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.empty();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("%0s");
      Elements elements0 = document0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      Elements elements1 = elements0.unwrap();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.wrap("3Yc0|=!VgP`pE3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.after("utf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      CDataNode cDataNode0 = new CDataNode("h1");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "h1", attributes0);
      Elements elements0 = formElement0.getElementsByAttributeValueStarting("h1", "device");
      Elements elements1 = elements0.after("s_]~w.<#52j4");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.before("Z'Rhz^y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.siblingElements();
      Elements elements1 = elements0.before("ZRh^y");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("\"HbXs");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      Elements elements1 = elements0.append("\"HbXs");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Elements elements0 = new Elements();
      Document document0 = new Document("Yp~4Cuh*");
      elements0.add((Element) document0);
      Elements elements1 = elements0.tagName("Yp~4Cuh*");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("h 0V1Qhax&Psr`gR,N");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingText("");
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Elements elements0 = new Elements();
      Document document0 = new Document("Yp~4Cuh*");
      elements0.add((Element) document0);
      elements0.prepend("k");
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains("k"));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Elements elements0 = new Elements();
      Document document0 = new Document("Yp~4Cuh*");
      elements0.add((Element) document0);
      List<String> list0 = elements0.eachText();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("XGRWX ;sbg=!^", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "progress", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsContainingOwnText("");
      elements0.html("progress");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("XGRWX ;sbg=!^", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "progress", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsContainingOwnText("");
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(30);
      Elements elements1 = elements0.val("");
      assertEquals(3, elements1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"");
      Element element0 = new Element(tag0, "\"");
      Elements elements0 = element0.getAllElements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tag tag0 = Tag.valueOf("wQ");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "wQ", attributes0);
      Elements elements0 = element0.getAllElements();
      elements0.toggleClass("wQ");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Element[] elementArray0 = new Element[4];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.removeClass("eC44Z_!#-%p=*$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.removeClass("{Vci_1S#wGL8-B1");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.addClass("s&dlvS|b`:l\"");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsContainingText("");
      Elements elements1 = elements0.removeAttr("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.attr("", "");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachAttr("");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasAttr("rB|Fk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.attr("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("WcP");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("t`&`_Zx\"8)rN-x");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev((String) null);
      Elements elements2 = elements1.wrap("t`&`_Zx\"8)rN-x");
      assertEquals(0, elements2.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      Elements elements1 = elements0.not("p");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Element[] elementArray0 = new Element[4];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.addClass("k.d$c:g8!ty=~8g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      Elements elements1 = elements0.select("f");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("h]0N", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "h]0N", attributes0);
      Elements elements0 = element0.getElementsByClass("h]0N");
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("f");
      Elements elements0 = document0.siblingElements();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        elements0.prevAll("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("HgL^P]SI<BQ=E>");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.nextAll("HgL^P]SI<BQ=E>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'HgL^P]SI<BQ=E>': unexpected token at '^P]SI<BQ=E>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
