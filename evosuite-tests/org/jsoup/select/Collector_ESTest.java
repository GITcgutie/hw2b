/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 19:44:00 GMT 2021
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Collector;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Collector_ESTest extends Collector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      Document document0 = Document.createShell("");
      Element element0 = Collector.findFirst(structuralEvaluator_Root0, document0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("D18;E*c\"^J");
      Document document0 = Document.createShell("!I>V&a3@&5Fvs)fJ");
      Element element0 = document0.text("!I>V&a3@&5Fvs)fJ");
      Element element1 = Collector.findFirst(evaluator_Tag0, element0);
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.normalise();
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("D18;E*c\"^J");
      Document document0 = Document.createShell("!I>V&a3@&5Fvs)fJ");
      document0.text("!I>V&a3@&5Fvs)fJ");
      Elements elements0 = Collector.collect(evaluator_Tag0, document0);
      assertTrue(elements0.isEmpty());
  }
}
