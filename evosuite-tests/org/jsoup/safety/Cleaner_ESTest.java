/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 20:42:49 GMT 2021
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("8Pv0<I&%d&<Z8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("</=Eu:eQ3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("org.jsoup.safety.Cleaner$ElementMeta");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      boolean boolean0 = cleaner0.isValid(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("</=Eu:eQ3");
      boolean boolean0 = cleaner0.isValid(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("</=Eu:eQ3");
      Document document1 = cleaner0.clean(document0);
      Element element0 = document0.body();
      document1.appendTo(element0);
      assertFalse(document0.hasParent());
      
      boolean boolean0 = cleaner0.isValid(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("</^4ru.Q3");
      Document document1 = cleaner0.clean(document0);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("<i>QX^Av,");
  }
}
