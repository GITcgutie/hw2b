/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 21 20:41:27 GMT 2021
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("m.,");
      boolean boolean0 = whitelist_AttributeKey0.equals("m.,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("blockquote");
      boolean boolean0 = whitelist_AttributeKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attributes attributes0 = whitelist0.getEnforcedAttributes(":all");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      Whitelist whitelist1 = whitelist0.addProtocols(":all", ":all", stringArray0);
      whitelist1.addAttributes(":all", stringArray0);
      Document document0 = new Document(".8b$i");
      Attribute attribute0 = new Attribute(":all", " > ");
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute(" > ", document0, attribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("yNF?2I'0lG[M", "object", "object");
      Document document0 = Document.createShell("org.jsoup.parser.XmlTreeBuilder");
      Attribute attribute0 = new Attribute("object", "colgroup");
      boolean boolean0 = whitelist1.isSafeAttribute("yNF?2I'0lG[M", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("yNF?2I'0lG[M", "20}[(K(", "20}[(K(");
      Document document0 = Document.createShell("org.jsoup.parser.XmlTreeBuilder");
      Attribute attribute0 = new Attribute("object", "colgroup");
      boolean boolean0 = whitelist1.isSafeAttribute("yNF?2I'0lG[M", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      whitelist0.addProtocols(":all", "{I@9PZt]G@I", stringArray0);
      whitelist0.addAttributes(":all", stringArray0);
      Document document0 = new Document(".8b$i");
      Attribute attribute0 = new Attribute(":all", " > ");
      boolean boolean0 = whitelist0.isSafeAttribute(" > ", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SJ5us##Nm";
      stringArray0[1] = "SJ5us##Nm";
      stringArray0[2] = "SJ5us##Nm";
      stringArray0[3] = "SJ5us##Nm";
      stringArray0[4] = "bLPy64P1{";
      stringArray0[5] = "SJ5us##Nm";
      stringArray0[6] = "SJ5us##Nm";
      whitelist0.addAttributes("SJ5us##Nm", stringArray0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("d>b", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("SJ5us##Nm");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("SJ5us##Nm", "SJ5us##Nm", attributes0);
      Element element0 = new Element(tag0, "bLPy64P1{", attributes0);
      boolean boolean0 = whitelist0.isSafeAttribute("SJ5us##Nm", element0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Document document0 = Document.createShell("org.jsoup.parser.XmlTreeBuilder");
      Attribute attribute0 = new Attribute("object", "colgroup");
      boolean boolean0 = whitelist0.isSafeAttribute("td", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      boolean boolean0 = whitelist0.isSafeTag("ul");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      boolean boolean0 = whitelist0.isSafeTag(":all");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      whitelist0.addProtocols(":all", "{I@9PZt]G@I", stringArray0);
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols(":all", "type", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "object";
      stringArray0[1] = "object";
      stringArray0[2] = "object";
      stringArray0[3] = "object";
      whitelist0.addProtocols("object", "object", stringArray0);
      Whitelist whitelist1 = whitelist0.removeProtocols("object", "object", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("h4", "colgroup", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "5";
      stringArray0[1] = "MtbKmsQA^2]]";
      stringArray0[2] = "5";
      stringArray0[3] = "MtbKmsQA^2]]";
      stringArray0[4] = "5";
      stringArray0[5] = "MtbKmsQA^2]]";
      stringArray0[6] = "5";
      stringArray0[7] = "MtbKmsQA^2]]";
      whitelist0.addProtocols("5", "MtbKmsQA^2]]", stringArray0);
      Whitelist whitelist1 = whitelist0.addProtocols("5", "MtbKmsQA^2]]", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "object";
      stringArray0[1] = "object";
      stringArray0[2] = "object";
      stringArray0[3] = "object";
      whitelist0.addProtocols("object", "object", stringArray0);
      whitelist0.addProtocols("object", "}VX]", stringArray0);
      Whitelist whitelist1 = whitelist0.removeProtocols("object", "object", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("i", "object");
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("!m)IwRY)vy~E.Ap@@", "table", "abbr");
      Whitelist whitelist2 = whitelist0.removeEnforcedAttribute("!m)IwRY)vy~E.Ap@@", "abbr");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("Mt'$", "BogusComment");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("thead", "7Lzq;>Q+Y80*2", "Dp{");
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("thead", "769", "769");
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      Whitelist whitelist1 = whitelist0.addAttributes("{I@9PZt]G@I", stringArray0);
      Whitelist whitelist2 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      whitelist0.addAttributes(":all", stringArray0);
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute(":all", ":all", ":all");
      Whitelist whitelist2 = whitelist1.removeAttributes(":all", stringArray0);
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("ioBT2", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = "{I@9PZt]G@I";
      stringArray0[2] = "{I@9PZt]G@I";
      whitelist0.addAttributes("{I@9PZt]G@I", stringArray0);
      Whitelist whitelist1 = whitelist0.addAttributes("{I@9PZt]G@I", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("summary", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      Whitelist whitelist1 = whitelist0.addProtocols(":all", ":all", stringArray0);
      whitelist1.preserveRelativeLinks(true);
      whitelist0.addAttributes(":all", stringArray0);
      Document document0 = new Document(".8b$i");
      Attribute attribute0 = new Attribute(":all", " > ");
      boolean boolean0 = whitelist0.isSafeAttribute(" > ", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "li";
      stringArray0[1] = "table";
      stringArray0[2] = "table";
      Whitelist whitelist1 = whitelist0.removeAttributes("table", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      assertNotNull(whitelist0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=3}_KR3qrX";
      stringArray0[1] = "https";
      stringArray0[2] = "=3}_KR3qrX";
      whitelist0.addTags(stringArray0);
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist0, whitelist1);
  }
}
